// Code generated by go-bindata.
// sources:
// resources/config.yml
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _resourcesConfigYml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\x50\xcd\x4e\xf3\x40\x0c\xbc\xf7\x29\x56\x39\xf5\x3b\x7c\x79\x80\x08\xa9\x12\x48\x48\x3d\x80\x90\xca\xad\xaa\xa2\x4d\xe2\x94\x45\x1b\x67\x71\xbc\x40\x95\xe6\xdd\xb1\x37\x10\xda\x0b\x3e\xd9\x33\xe3\xbf\xe1\x53\x80\x92\xc9\xe2\xe0\x2d\x43\xd9\xd9\x50\xac\x8c\x19\x98\x1c\x1e\x0b\x93\xed\x52\x92\x09\xe4\x90\xe1\x08\x24\xd8\x16\x59\x01\x8c\x5d\x95\xea\x7b\xdf\xdb\x84\x54\x7d\xef\xc1\xa2\x40\xb7\x92\xcd\x1a\xef\xa5\x44\x97\x2a\x4b\x64\x4f\x52\xee\xc7\x31\xdf\x22\x02\x3d\xcb\xf2\x69\x3a\x28\xd7\x57\xaf\x50\xb3\x90\xd7\x5c\xb6\xea\x23\x87\xc8\x65\xeb\x3c\xa0\xed\x60\x56\x3c\x4a\x36\x4d\xf9\xf0\xe1\x5a\x5e\x24\x0d\x04\xc0\x06\xb0\x76\x30\x14\x86\x29\xc2\x4a\xfe\x88\x35\x47\x92\x17\xa1\x0b\xfa\x61\x61\xce\xf3\x7f\x82\x9b\x65\x52\x61\x1e\x6c\x08\xb6\xf2\x60\x46\xa1\xc7\x51\x0c\x39\x82\xc9\x9f\xa8\x0f\x40\x2c\x03\xa7\x49\x70\x8d\x77\x4b\x17\x7d\x92\xe9\xa1\xe7\xc5\x41\xad\x66\x6e\x93\x06\xc9\x45\xd2\xfa\xdd\x4b\xf0\x16\x1d\x41\x23\x66\x3a\xde\xac\x4b\xa3\x76\xeb\xea\x7f\x69\xad\xc6\xa2\x6d\x23\xd6\xca\x07\xf1\x7f\x7d\xad\xfb\xeb\x3c\x8d\x01\x7c\x9b\x2f\x37\x9a\x9b\xff\x3a\x67\xff\xeb\x5b\x76\xb8\x38\xed\x62\xad\x08\xee\x5e\x9c\x6f\x08\xf0\x0c\x9f\xf2\x52\xcd\xbb\x1f\x03\xe7\x0d\x22\xfb\x0a\x00\x00\xff\xff\x26\x4e\xb4\xa2\x31\x02\x00\x00")

func resourcesConfigYmlBytes() ([]byte, error) {
	return bindataRead(
		_resourcesConfigYml,
		"resources/config.yml",
	)
}

func resourcesConfigYml() (*asset, error) {
	bytes, err := resourcesConfigYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resources/config.yml", size: 561, mode: os.FileMode(420), modTime: time.Unix(1460452228, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"resources/config.yml": resourcesConfigYml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"resources": &bintree{nil, map[string]*bintree{
		"config.yml": &bintree{resourcesConfigYml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

