// Code generated by go-bindata.
// sources:
// resources/config.yml
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _resourcesConfigYml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x52\xc1\x6e\xdb\x30\x0c\xbd\xfb\x2b\x08\x67\x87\x16\x18\xfc\x01\xbe\x0c\xd8\x8a\x01\xd9\xa1\x1b\x90\xdc\x86\x21\x50\x14\x2a\xd6\x6a\x53\x86\x4c\xaf\x0d\x1c\xff\xfb\x48\xa9\x51\xb1\x62\x3e\x91\x8f\x8f\xe2\xe3\xa3\x37\x1b\x98\x38\xce\x96\x23\xd8\x40\xce\x9f\xe7\xde\xb0\x0f\x04\xce\xf7\x58\x55\x1b\x78\x40\xe7\xc9\x2b\x34\x81\x0b\x11\x38\x1a\x9a\x94\x43\x67\x40\x63\x3b\xe0\xcb\x88\x10\x1c\x7c\xdb\x7d\x7f\xdc\xd9\x0e\x07\xd3\x54\x8a\x1d\x6e\x4c\x3c\x0c\x66\x6c\x2b\xd0\x41\xd2\xd5\x42\xbd\x4b\x41\x2d\x90\x27\xc6\x33\x46\xc1\xb6\xc4\x0a\xd0\x3c\x1c\x53\xfe\xb5\x0f\x26\x21\xc7\x10\x7a\x34\x24\xd0\x67\x89\x32\xa7\xef\x25\x25\x9f\x32\x13\xa3\xb9\x48\xfa\x73\x59\x9a\x2d\x11\xc6\xbd\x0c\x5f\xd7\x5f\x5a\x0b\xc7\xdf\x68\x59\x8a\xff\xd6\x6a\x5d\x6c\xeb\x00\x5f\xd0\xce\x8c\xc5\x81\x67\xcf\x1d\xd4\x61\xe6\x07\x1f\x6b\x08\xa3\x6e\xfd\xb1\x54\x05\x1f\x67\x9e\x92\x33\x77\xd3\x7d\x66\x73\x87\x70\x2a\x16\xa9\x0f\x75\xe6\x1d\x94\x46\x66\xc0\x1a\x18\x87\x51\x7d\x68\xaa\x77\xa5\x2c\xec\x51\xa2\x75\x6d\xa6\x67\xef\x38\x29\xdb\x87\xd7\x59\xe9\xf5\x3c\x7e\x8e\xef\x4c\x16\xeb\x64\xf0\x88\x74\x42\xb2\x97\x3b\xd3\x3c\x35\x06\xa6\x11\xad\x77\x1e\x4f\x49\xc8\x87\x88\xae\x86\x27\xbc\x28\xf7\xad\xf3\xbe\xe8\x28\xfd\x1e\xa7\x56\x2e\x3b\xa7\x8b\xef\x5f\xe5\xe6\x7b\xff\x4f\x49\x55\xa2\xc3\x6d\xb7\x16\xae\xf9\xc2\x82\x43\x59\x0a\x16\x01\x97\x45\x7e\x84\x33\x42\xf3\x23\x86\x11\x23\xcb\xb0\x75\x15\x5c\xbf\x3f\x26\xbe\xb1\x5b\x0d\xf5\x42\xd7\xf2\xeb\x68\x96\x8b\x9f\xd2\x4b\x22\x57\x7a\x53\xd8\x7c\xe9\x7c\x7f\x8a\x48\x57\x7c\x11\xbe\xe5\xdd\x4d\x54\x7e\x7e\xfd\x1b\x00\x00\xff\xff\x56\xfd\x05\xd7\xdb\x02\x00\x00")

func resourcesConfigYmlBytes() ([]byte, error) {
	return bindataRead(
		_resourcesConfigYml,
		"resources/config.yml",
	)
}

func resourcesConfigYml() (*asset, error) {
	bytes, err := resourcesConfigYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resources/config.yml", size: 731, mode: os.FileMode(420), modTime: time.Unix(1460547413, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"resources/config.yml": resourcesConfigYml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"resources": &bintree{nil, map[string]*bintree{
		"config.yml": &bintree{resourcesConfigYml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

