// Code generated by go-bindata.
// sources:
// resources/config.yml
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _resourcesConfigYml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\x52\x51\x6b\xdb\x30\x10\x7e\xf7\xaf\x38\x9c\x3d\x24\xb0\xf9\x07\x98\x41\x61\x2b\x83\x0c\xd6\x0d\x92\xb7\x52\x8c\xa2\x9c\x62\xad\xb6\xa4\xc9\xd2\xda\xe0\xf8\xbf\xef\x4e\x4e\xd4\xb4\x8c\xea\x49\xf7\xdd\x77\xfa\xbe\xbb\xd3\x62\x01\x43\xf0\x51\x06\x0f\xd2\x1a\xa5\x0f\xb1\x13\x41\x5b\x03\x4a\x77\x58\x14\x0b\xb8\x45\xa5\x8d\x66\x68\x00\x65\x3d\x04\x2f\xcc\xc0\x1c\x73\x00\x14\xb2\x85\x70\x74\x08\x56\xc1\xf7\xcd\xcf\xbb\x8d\x6c\xb1\x17\x55\xc1\x58\x73\x61\x62\xd3\x0b\x57\x17\xc0\x42\x54\x55\x43\xb9\x49\x97\x92\x20\x6d\x02\x1e\xd0\x13\xb6\x36\x81\x01\x13\xfb\x5d\x8a\xbf\x75\x56\x24\x64\x67\x6d\x87\xc2\x10\xf4\x85\x6e\x33\xa7\xeb\x28\x34\x3a\x45\xc2\x7b\x71\xa4\xf0\x7e\x1c\xab\xb5\x31\xe8\xb7\x24\x3e\x4d\x0f\x9c\xb3\xbb\xdf\x28\x03\x25\x5f\xe7\x4a\x6e\x6c\xad\x00\x9f\x51\xc6\x80\x79\x02\x4f\x3a\xb4\x50\xda\x18\x6e\xb5\x2f\xc1\x3a\xee\xfa\x63\xce\x12\xee\x62\x18\xd2\x64\x96\xc3\x6a\x66\x87\x16\x61\x9f\x47\xc4\x73\x28\x67\x5e\xc3\x34\x23\x7a\x2c\x21\x60\xef\x78\x0e\x55\xf1\x26\x35\x1b\xbb\xa3\xdb\x34\x55\xc3\x93\x56\x21\x39\xdb\xda\xb3\x56\x7a\x7d\x96\x8f\xfe\xcd\x90\x69\x74\x24\xec\xd0\xec\xd1\xc8\xe3\x52\x54\x8f\x95\x80\xc1\xa1\xd4\x4a\xe3\x3e\x19\xf9\xe0\x51\x95\xf0\x88\x47\xe6\xbe\x54\xae\xb2\x8f\x5c\xaf\x71\xa8\x69\xb3\x31\x6d\x7c\x7b\xb6\x3b\xef\xfb\x7f\x4e\x8a\x7c\x6b\x2e\xbd\xd5\x70\x9a\x37\x4c\x38\xe4\xa6\x6a\xf8\x21\x9c\x13\xbb\x0e\x61\xa4\xf4\x38\xd2\x97\x38\x20\x54\xbf\xbc\x75\xe8\x03\xc9\x4e\x13\xe1\x7c\xfe\x0a\x7f\x55\x47\x37\x5e\xd5\x29\xff\x21\x8e\xe6\xdc\x4d\x7a\x88\x7c\x53\xe9\xb9\xd6\xe3\x9f\xa8\x3d\x75\xcd\x6b\xb8\x59\x36\xc0\x1f\x8e\xa5\x57\x49\x96\x4f\xe6\xaa\x68\x24\xe7\x1d\xfd\xc0\xe5\x6b\xde\x7b\xf6\xf8\x0c\xd8\xa9\x2a\x7b\x84\xcf\x9f\xf8\x9d\xfb\x97\x15\x96\x0f\x57\xd6\xae\x64\x89\xf0\xb5\xd5\xdd\xde\xa3\x39\xe1\x33\xb5\x24\xc3\xe6\x32\xc0\x59\x81\x68\xff\x02\x00\x00\xff\xff\xce\x59\xa6\x90\x89\x03\x00\x00")

func resourcesConfigYmlBytes() ([]byte, error) {
	return bindataRead(
		_resourcesConfigYml,
		"resources/config.yml",
	)
}

func resourcesConfigYml() (*asset, error) {
	bytes, err := resourcesConfigYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resources/config.yml", size: 905, mode: os.FileMode(420), modTime: time.Unix(1460539380, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"resources/config.yml": resourcesConfigYml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"resources": &bintree{nil, map[string]*bintree{
		"config.yml": &bintree{resourcesConfigYml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

