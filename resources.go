// Code generated by go-bindata.
// sources:
// resources/config.yml
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _resourcesConfigYml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\x52\xc1\x6e\xdb\x30\x0c\xbd\xfb\x2b\x08\x67\x87\x16\x18\xfc\x01\xbe\x0c\x58\x8a\x01\xd9\xa1\x1b\x90\xec\x34\x0c\x81\xa2\x50\xb1\x56\x5b\x12\x24\x7a\x6d\xe0\xf8\xdf\x47\xca\x89\x86\x05\x9b\x4f\xe4\xe3\xa3\xf8\xf8\xe8\xd5\x0a\x12\xc5\x51\x53\x04\xed\x9d\xb1\xa7\xb1\x57\x64\xbd\x03\x63\x7b\xac\xaa\x15\x3c\xa1\xb1\xce\x0a\x94\xc0\xf8\x08\x14\x95\x4b\xc2\x71\x27\x40\xa5\x3b\xa0\x73\x40\xf0\x06\x3e\x6f\xbf\x3c\x6f\x75\x87\x83\x6a\x2a\xc1\xf6\x37\x26\xee\x07\x15\xda\x0a\x64\x10\x77\xb5\x50\x6f\x73\x50\x33\x64\x1d\xe1\x09\x23\x63\x1b\x47\x02\xb8\x71\x38\xe4\xfc\x53\xef\x55\x46\x0e\xde\xf7\xa8\x1c\x43\x1f\x39\x5a\x38\x7d\xcf\xa9\xb3\x39\x53\x31\xaa\x33\xa7\xdf\xa7\xa9\xd9\x38\x87\x71\xc7\xc3\xe7\xf9\x87\xd4\xfc\xe1\x27\x6a\xe2\xe2\xdf\xb5\x5a\x16\xdb\x18\xc0\x37\xd4\x23\x61\x71\xe0\xd5\x52\x07\xb5\x1f\xe9\xc9\xc6\x1a\x7c\x90\xad\xdf\x97\x2a\xe3\x61\xa4\x94\x9d\x79\x48\x8f\x0b\x9b\x3a\x84\x63\xb1\x48\x7c\xa8\x17\xde\x5e\x68\x4e\x0d\x58\x03\xe1\x10\xc4\x87\xa6\xba\x2b\x2d\xc2\x9e\x39\x9a\xe7\x26\xbd\x5a\x43\x59\xd9\xce\x5f\x67\xe5\xd7\x97\xf1\x63\xbc\x33\x99\xad\xe3\xc1\x01\xdd\x11\x9d\x3e\x3f\xa8\xe6\xa5\x51\x90\x02\x6a\x6b\x2c\x1e\xb3\x90\x77\x11\x4d\x0d\x2f\x78\x16\xee\x9f\xce\xc7\xa2\xa3\xf4\x5b\x4c\x2d\x5f\x76\xcc\x17\xdf\x5d\xe5\x2e\xf7\xfe\x97\x92\xaa\x44\xfb\xdb\x6e\x2d\x5c\x96\x0b\x33\x0e\xd7\xa5\x2e\xe4\xbf\x85\x80\x71\xcd\x71\xbf\x56\x89\xb7\x84\x89\x59\xd3\xc4\x7f\xc6\x09\xa1\xf9\x1a\x3d\x97\x89\xa7\xcf\x33\xe3\xf2\xfd\x52\x11\x8a\x27\xad\x84\x72\xb2\x4b\xf9\x97\x24\xfb\xcf\xdb\x1f\xf2\xd3\xbc\x50\x7e\x8c\x3b\xd7\x9d\xed\x8f\x11\xdd\x05\xdf\xb8\x5f\xd3\xf6\xa6\x7a\x19\x37\x57\xbf\x03\x00\x00\xff\xff\x6e\x5d\x6c\x79\xfd\x02\x00\x00")

func resourcesConfigYmlBytes() ([]byte, error) {
	return bindataRead(
		_resourcesConfigYml,
		"resources/config.yml",
	)
}

func resourcesConfigYml() (*asset, error) {
	bytes, err := resourcesConfigYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resources/config.yml", size: 765, mode: os.FileMode(420), modTime: time.Unix(1460611344, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"resources/config.yml": resourcesConfigYml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"resources": &bintree{nil, map[string]*bintree{
		"config.yml": &bintree{resourcesConfigYml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

